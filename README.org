** Fall 2010 Stanford course, /Developing Apps for iOS/.

**** This excellent series of online lectures is available through [[http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewPodcast%3Fid%3D395605774][iTunes U]].
**** You can download slides from the lectures and associated [[http://www.stanford.edu/class/cs193p/cgi-bin/drupal/downloads-2010-fall][assignments]].

** This repository contains my solution to [[http://www.stanford.edu/class/cs193p/cgi-bin/drupal/system/files/assignments/Assignment%204_0.pdf][Assignment IV]].

*** Differences my from Assignment III solution:

Can zoom and pan using gestures. I also developed a C function, lineWidthScale, which calculates how the thickness of a line changes when scaling of the transform changes. It is not used now, but will be essential if I implement my idea of separate x- and y-zooming.

Can run on the iPad. Notice that very little of my code needs to know which platform it's running in -- less than that in Paul Hegarty's demo. Only method =graphPressed= has to decide whether to push the =graphViewController= or just redraw the graph in the view already showing. This is in keeping with my goal of doing as much initialization in Interface Builder as possible. I found myself a bit "off the map", however, when it came to using Xcode 4 to pull it this together.

One problem was figuring out the conventions for creating a Universal app from an iPhone app in Xcode 4. It was puzzling that I couldn't even find a Split View Controller object in Interface Builder. But of course, that's because this was an iPhone/iPadTouch XIB, not an iPad XIB. I discovered when I selected the /Calculator/ root in the project view's tree, selected the /Calculator/ target, and selected /iPhone/iPad/ for the /Targeted Device Family/, that lo and behold, Xcode offered to create the interface files for iPad. Easy, once you know what to do!

But editing the MainWindow-iPad.xib presented another puzzle. The assignment called for using UINavigationControllers in /both/ sides of the UISplitViewController, which is probably a good idea. Tutorials I found on the web confirmed my guess that I should just be able to drag a Navigation Controller object onto the second icon under the split view controller icon. The existing view controller icon should then just change into a navigation controller icon, as desired. But my drag operation just wouldn't take. The navigation controller icon would just snap back to the objects list. I tried everything. Finally, I resorted to editing MainWindow-iPad.xib in the Interface Builder 3 application. Dragging worked like a charm there, just like the tutorials showed. I saved the file and went back to Xcode, and everything still worked, and it showed navigation controller icons for both sides of the split view controller.

So far so good, but I couldn't get the navigation bar button item to appear, the one that opens the popover calculator. I finally realized I couldn't use the navigation controller's =backBarButtonItem= property for the button. The back button item only appears when a second view controller is pushed onto the navigation controller. The button item finally showed up when I used the =leftBarButtonItem= property instead.

The final time-eater was a learning experience earned once again from not initializing things in code as in the lectures. When you set up a navigation controller in Interface Builder, you assign its top view controller. For the left one, I had to manually assign a title to its navigation bar -- or rather, as I discovered, to it's top view controller's navigation item. In lecture 9, Paul Hegarty used method =pushViewController:animated:= to push the single view controller into the left navigation controller. Evidently, this results in the /navigation controller/ itself (since it /is/ a view controller) acquiring the title. Instead, I had to drill down to the navigation controller's =topViewController.navigationItem.title= property.