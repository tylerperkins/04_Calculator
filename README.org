** Fall 2010 Stanford course, /Developing Apps for iOS/.

**** This excellent series of online lectures is available through [[http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewPodcast%3Fid%3D395605774][iTunes U]].
**** You can download slides from the lectures and associated [[http://www.stanford.edu/class/cs193p/cgi-bin/drupal/downloads-2010-fall][assignments]].

** This repository contains my solution to [[http://www.stanford.edu/class/cs193p/cgi-bin/drupal/system/files/assignments/Assignment%203_1.pdf][Assignment III]]

*** Unique aspects of my solution:

**** Thinking about =@protocol GraphDataDelegate=

The assignment asks us to create a protocol the GraphView's delegate conforms
to, so the GraphView can request from the delegate the data to
plot. You could just have the GraphView repeatedly ask the delegate
for the function value at a given argument. This, I think, is the
solution expected by the assignment. But it seemed to me a better idea
to provide to the GraphView /just the data/, and to provide it /all at
once at the time the graph is requested/.

Strictly speaking, taking such a snapshot at graph time is not
necessary, because the CalculatorViewController doesn't actually do
anything while the user is working with the graph. But I'm talking
about best practices here. If we didn't grab such a snapshot from the
delegate, we would be unconsciously imposing a constraint on the
delegate: Some of its state must not change while the GraphView is
plotting. This is the classic entanglement wrought by objects
containing mutable state.

So my GraphDataDelegate protocol just specifies a method that the
GraphView uses to ask the GraphViewController delegate for an
(immutable) closure, which is an Objective-C block implementing the
requested anonymous function. Semantically, that's exactly what we
want to hand to the GraphView, because it's exactly the thing we're
graphing, a mathematical function of one variable.

**** Using the current transformation matrix (CTM)

The powerful affine transformation functions provided by Quartz 2D are
truly the right tools for the job, here. They correctly adjust the
coordinate system as we zoom, pan, or rotate. We don't have to adjust
the function we're plotting just to accomodate a change in scale or shift
in location. So in my GraphView's =drawRect:= method, I employ functions
=CGContextTranslateCTM= and =CGContextScaleCTM=.

Unfortunately, the =AxesDrawer= provided by Stanford for use in the
assignment assumes the default coordinate system. So drawing the axes
must be done /before/ we change the CTM. This forces us to think about
two different ways to draw things. Really, I think the AxesDrawer
should be rewritten anyway, but that's a task for another day!

**** Handling discontinuities

There is no truly general solution to the problem of plotting
functions containing discontinuities. For example, touching buttons
=x - 1.1 = 1/x Graph= results in a plot with a near-vertical line at
/x == 1.1/. The mathematical function contains no such line, but one is
drawn because the value calculated just to the left of /x == 1.1/ is large negative, and just to the right the value is large
positive -- both good numbers. Well, you might say we could just
not do the drawing when numbers go to extremes, or maybe when the
slopes of adjacent coordinates change radically. But then there is the
problem of what we mean by "extreme" or "radical". What limits could
we define that would exclude obvious discontinuities like the above, but
would continue to draw the violent but continuous scribbles
surrounding the origin of /sin(1/x)/, /i.e./, =x 1/x sin Graph=?

So, I just punted! My code never attempts to interpret a sequence of good
coordinates as a discontinuity. But it certainly can identify a
discontinuity when the coordinate is not good. When an error results
from calculating the given function, my code /does/ omit the result
from the plot. You can see this by plotting the same function shifted a
bit: =x 1/x Graph=. It works this time, (at most zoom
levels) because it just so happens that the value at *exactly* zero is
calculated. This results in the erroneous value, /NAN/, which we don't
draw.
